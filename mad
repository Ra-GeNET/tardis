 
#Cocky

## What is Cocky?
Cocky is an highly opinionated server configuration for all round web development. It lays focus on usability, shell scripting, workflow optimisation and collabrative coding.

Furter on will be descpribed how this set up comes into place. 
And some information on the different software that makes this IDE.

###Work still in progress.. Please check back later.


About Gate One
==============
`Gate One <http://liftoffsoftware.com/Products/GateOne>`_ is an HTML5 web-based terminal emulator and SSH client.  Top features:

* No browser plugins required!  Say goodbye to the security problems of Java, Flash, and ActiveX.
* Multi-user and multi-terminal:  Hundreds of simultaneous users and terminals can be served from ho-hum hardware.
* Advanced terminal emulation including support for 256 colors, fancy text styles, and more.
* Supports capturing and displaying images and PDFs inline within terminals (see screenshots).
* Type in your native language!  Gate One supports Unicode, international keyboard layouts, and localized strings (internationalization or i18n).
* Natural copy & paste:  Highlight text and use your browser's native context menu.  On Macs you can use ⌘-c and ⌘-v and on Linux desktops you can middle-click-to-paste.  Shift-Insert works too!
* Terminal sessions can be resumed even if the browser is closed or disconnected.  They can also be resumed from a completely different computer.  You'll never have to worry about the office VPN disconnecting again!
* Supports server-side logging of user sessions via any combination of syslog, remote syslog, or directly to disk.
* Gate One can be embedded into any web application.  A few lines of JavaScript is all it takes!  There's an interactive tutorial covering how to embed available in the `tests` directory (hello_embedded).
* Many authentication mechanisms are supported:  Anonymous, Kerberos (Single Sign-On with Active Directory!), PAM, Google Auth, and there's an OpenID-like WebSocket API for applications embedding Gate One (see the chat app in the tests directory for an example of how it works).
* Gate One is easy to customize:  Themes and plugins can add features or override just about anything.  In fact, Gate One's SSH functionality is implemented entirely via a plugin.
* Plugins can be written in any combination of Python, JavaScript, and CSS.
* The Gate One server can be stopped & started without users losing their running terminal applications (even SSH sessions stay connected!).
* The SSH plugin allows users to duplicate sessions without having to re-enter their username and password (it re-uses the existing SSH tunnel).  It also supports key-based authentication and includes an SSH identity manager that supports RSA, DSA, ECDSA, and even X.509 certificates.
* The SSH plugin also provides a library of functions that *other* plugins can use to seamlessly execute background operations on the currently-connected terminal.  You can capture this output from JavaScript and do whatever you want with it.
* The Bookmarks plugin lets you keep track of *all* of your hosts with support for tagging, sorting, and includes a super fast search.  It was built to handle thousands of bookmarks and can be used with whatever URLs you want--it isn't limited to SSH!
* The Logging plugin includes a Log Viewer that allows users to sort, view, and even export recordings of their terminal sessions to self-contained HTML files that can be shared.  Demonstrating anything on the command line can be as simple as performing the task and clicking a button!
* The Playback plugin allows users to rewind and play back their connected terminal sessions in real-time, just like a video!  This can be done via the playback controls or by holding the shift key while scrolling.
* The Convenience plugin adds many convenient capabilities:
    * IPv4 and IPv6 addresses become clickable elements that can perform a reverse DNS lookup.
    * The output of 'ls -l' is transformed into clickable elements that can perform user and group lookups, convert bytes into human-readable strings, and even tell you what the 'chmod equivalent' is of the permissions field (e.g. clicking on 'crw-rw-rw-' would tell you, "(Character Device) with permissions equivalent to 'chmod 0666'").
    * Automatic syntax highlighting of syslog messages.
* The Example plugin demonstrates how to write your own plugins and shows off the SSH plugin's exec_remote_command() functionality.
* Gate One works with Python 2.6+, Python 3, and even pypy!
* The daemon that acts as the web server for Gate One is small and light enough to be included in `embedded devices <http://beagleboard.org/bone>`_.

License
-------
Gate One is dual licensed:  `AGPLv3 <http://www.gnu.org/licenses/agpl.html>`_ or `Commercial Licensing <http://liftoffsoftware.com/Products/GateOne>`_.  More information can be found at http://liftoffsoftware.com/

Screenshots
-----------
.. figure:: http://i.imgur.com/fb32a.png
    :align: center

    The Grid View showing multiple terminals

.. figure:: http://i.imgur.com/5P6wy.png
    :align: center

    Displaying images inline in a terminal

.. figure:: http://i.imgur.com/zRLn3.png
    :align: center

    A demonstration of some of the Convenience plugin's capabilities

.. figure:: http://i.imgur.com/97CYx.png
    :align: center

    The Example plugin showing off the real-time load graph and the 'top' widget

Documentation
-------------
The documentation for Gate One can be found here:  http://liftoff.github.com/GateOne/

Also, all (this) documentation is in the "gateone/docs" directory.  The HTML form is pre-built and ready-to-read.

Demo
----
Just press the ESC key on any page at http://liftoffsoftware.com/ to have Gate One drop down into view, Quake-style!

Other Notable Bits
------------------
Gate One's `termio` and `terminal` Python modules can be used together to automate, screen-scrape, and completely control terminal applications.  The `expect() <http://liftoff.github.com/GateOne/Developer/termio.html#termio.BaseMultiplex.expect>`_ function can be used as a replacement for `pexpect <http://www.noah.org/wiki/pexpect>`_ that has some additional features and benefits:

* It can be used asynchronously:  It won't block which means it is perfect for executing commands from a web application.
* It supports sophisticated decision trees and callbacks:  You can completely re-define all patterns and callbacks on-the-fly based on whatever conditions you want.
* It supports Unicode output *and* input.
* It works with Python 3.
Font Sources
============

Most
----
With the exception of a few (enumerated below), all of these these fonts come
from Google's Web Font directory:

http://www.google.com/fonts/

Others
------
The Liberation Mono font is copyright Red Hat and is distributed under the Red
Hat Liberation License which is included in this same directory.

The Source Code Pro font is Copyright 2010, 2012 Adobe Systems Incorporated and
distributed under the SIL Open Font License which is included in this same
directory.
Gate One plugins go in this directory.  They're not the same as applications in that they can modify the behavior of all installed applications simultaneously.
Settings Directory
==================
Gate One's settings directory contains .conf files that define all the settings
and policies that will apply to users and groups.  Mostly, these .conf files
define who can login and what they can do but other general-purpose settings can
go in here as well.

.. note:: Support for groups is forthcoming.

The Format
----------
All .conf files are expected to be in a JSON format that uses the following
conventions::

    {
        "<key=value>": {
            "<application name>": {
                "<application-specific setting>"
            } // Comments like this are OK
        /*
            Comments like this are fine too
        */
        }

        // Empty lines (like above) are ignored
    }

.. note:: Instead of, '<key=value>' an asterisk "*" (the default rule) may be used to indicate "all users".

The Rules
---------

Rule 1: Only .conf files will be read
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Any and all files ending in .conf will be read in alphabetical order and
ultimately combined into a single Python dict (an RUDict to be specific).  All
other files in the security directory will be ignored (like this README*.rst).

Rule 2: Parameters will be merged safely
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The security dict is constructed in such a way that all parameters can be added
to or overridden safely without cloberring parent dicts or keys.  For example,
if we have the following in a file named 50limits.conf::

    {
        "*": {
            "limits": {
                "terminal": {
                    "max_terms": 10
                }
            }
        }
    }

...and we have the following in a file named "60more_limits.conf"::

    {
        "*": {
            "terminal": {
                "max_terms": 5, // Override max_terms_total
                "additional_item": true // Add a new key:value
            }
        }
    }

The resulting dict would look like this:

    {
        "*": {
            "terminal": {
                "max_terms": 5,
                "additional_item": true
            }
        }
    }

The important thing to note is that the "terminal" dict wasn't completely
clobbered by the subsequent .conf file.  Instead the two were merged in an
intelligent manner.

Rule 3: Regular expressions are OK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
You may use regular expressions in users, groups, and attributes.  For example::

    {
        "user.email=*.company.com": {
            "terminal": {
                login: true,
                "max_terms": 10
            }
        }
    }

The above example would allow login for all users with an email address ending
in 'company.com'.

Rule 4: Order Matters
^^^^^^^^^^^^^^^^^^^^^
There's a reason why the example files in this directory begin with numbers: The
order in which they're loaded matters.  Files that come later (alphanumerically)
will override the settings from earlier files.  So if 10access.conf exists and
it has '*' (default) allowing everyone to login but 20access.conf has a default
deny the default deny will take precedence.
Just run:

    ./hello_embedded_world.py

...and connect to https://127.0.0.1/ in your browser.

Optionally, you can pass --port=<whatever> to change which port it listens on.
= Diakonos

== REQUIREMENTS

- Ruby 1.9.2+

Diakonos is built to run on Linux, but may run under other flavours of UNIX.
It is known NOT to work under Windows (unless using Cygwin).


== DOWNLOAD

The latest stable tarballs can be acquired from

  http://diakonos.pist0s.ca/

The latest development code can be obtained from github:

  git clone git://github.com/Pistos/diakonos.git


== INSTALLATION

  ruby install.rb --help
  ruby install.rb [installation parameters]

You may need root privileges on the system in order to install to system-wide
places like /usr .  However, Diakonos runs perfectly well in userspace, such
as under ~/usr .

=== RVM

If you use RVM[1], note that Diakonos installs very easily into an RVM-based
Ruby.

After installing Diakonos under RVM, you can symlink to the installed binary,
and that will allow you to use Diakonos with that specific Ruby version no
matter what the current RVM Ruby is.  Example:

  mkdir -p ~/bin
  cd ~/bin
  ln -s /home/pistos/.rvm/rubies/ruby-1.9.2-p180/bin/diakonos

Then ensure that ~/bin is in your PATH.

[1]: https://rvm.io


== UNINSTALLATION

  diakonos --uninstall


== USAGE

Run with any of these:

  diakonos [filename...]
  diakonos -s <session-name>
  diakonos -m <regexp>

or, for other options and arguments,

  diakonos --help

For help using Diakonos, simply press F1 or Shift-F1 from within the editor to
use the interactive help system.

To dig deeper into Diakonos' rich feature set, see https://github.com/Pistos/diakonos/wiki/Beyond-the-Basics .


----------------------------------------------------------------

The source code repository is at http://github.com/Pistos/diakonos .

Send comments, feedback and tech support requests to the #mathetes channel on
the FreeNode IRC network ( http://webchat.freenode.net/?channels=mathetes ), or
the mailing list diakonos@librelist.com .  Reproducible issues may be reported
at https://github.com/Pistos/diakonos/issues .


Pistos
http://diakonos.pist0s.ca/
TADADA
